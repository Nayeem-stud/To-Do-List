{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// MongoDB Atlas connection\nmongoose.connect('mongodb+srv://<username>:<password>@cluster0.mongodb.net/todo-app?retryWrites=true&w=majority', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst taskSchema = new mongoose.Schema({\n  text: String,\n  completed: Boolean\n});\nconst Task = mongoose.model('Task', taskSchema);\n\n// Routes\napp.get('/tasks', async (req, res) => {\n  const tasks = await Task.find();\n  res.json(tasks);\n});\napp.post('/tasks', async (req, res) => {\n  const newTask = new Task(req.body);\n  await newTask.save();\n  res.json(newTask);\n});\napp.put('/tasks/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const updatedTask = await Task.findByIdAndUpdate(id, req.body, {\n    new: true\n  });\n  res.json(updatedTask);\n});\napp.delete('/tasks/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  await Task.findByIdAndDelete(id);\n  res.json({\n    message: 'Task deleted'\n  });\n});\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","bodyParser","app","port","use","json","connect","useNewUrlParser","useUnifiedTopology","taskSchema","Schema","text","String","completed","Boolean","Task","model","get","req","res","tasks","find","post","newTask","body","save","put","id","params","updatedTask","findByIdAndUpdate","new","delete","findByIdAndDelete","message","listen","console","log"],"sources":["C:/Users/acer/Desktop/python/todo-app/client/src/App.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// MongoDB Atlas connection\nmongoose.connect('mongodb+srv://<username>:<password>@cluster0.mongodb.net/todo-app?retryWrites=true&w=majority', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst taskSchema = new mongoose.Schema({\n  text: String,\n  completed: Boolean,\n});\n\nconst Task = mongoose.model('Task', taskSchema);\n\n// Routes\napp.get('/tasks', async (req, res) => {\n  const tasks = await Task.find();\n  res.json(tasks);\n});\n\napp.post('/tasks', async (req, res) => {\n  const newTask = new Task(req.body);\n  await newTask.save();\n  res.json(newTask);\n});\n\napp.put('/tasks/:id', async (req, res) => {\n  const { id } = req.params;\n  const updatedTask = await Task.findByIdAndUpdate(id, req.body, { new: true });\n  res.json(updatedTask);\n});\n\napp.delete('/tasks/:id', async (req, res) => {\n  const { id } = req.params;\n  await Task.findByIdAndDelete(id);\n  res.json({ message: 'Task deleted' });\n});\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,UAAU,GAAGH,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AACfE,GAAG,CAACE,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAN,QAAQ,CAACO,OAAO,CAAC,+FAA+F,EAAE;EAChHC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAG,IAAIV,QAAQ,CAACW,MAAM,CAAC;EACrCC,IAAI,EAAEC,MAAM;EACZC,SAAS,EAAEC;AACb,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGhB,QAAQ,CAACiB,KAAK,CAAC,MAAM,EAAEP,UAAU,CAAC;;AAE/C;AACAP,GAAG,CAACe,GAAG,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACpC,MAAMC,KAAK,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC/BF,GAAG,CAACd,IAAI,CAACe,KAAK,CAAC;AACjB,CAAC,CAAC;AAEFlB,GAAG,CAACoB,IAAI,CAAC,QAAQ,EAAE,OAAOJ,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAMI,OAAO,GAAG,IAAIR,IAAI,CAACG,GAAG,CAACM,IAAI,CAAC;EAClC,MAAMD,OAAO,CAACE,IAAI,CAAC,CAAC;EACpBN,GAAG,CAACd,IAAI,CAACkB,OAAO,CAAC;AACnB,CAAC,CAAC;AAEFrB,GAAG,CAACwB,GAAG,CAAC,YAAY,EAAE,OAAOR,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEQ;EAAG,CAAC,GAAGT,GAAG,CAACU,MAAM;EACzB,MAAMC,WAAW,GAAG,MAAMd,IAAI,CAACe,iBAAiB,CAACH,EAAE,EAAET,GAAG,CAACM,IAAI,EAAE;IAAEO,GAAG,EAAE;EAAK,CAAC,CAAC;EAC7EZ,GAAG,CAACd,IAAI,CAACwB,WAAW,CAAC;AACvB,CAAC,CAAC;AAEF3B,GAAG,CAAC8B,MAAM,CAAC,YAAY,EAAE,OAAOd,GAAG,EAAEC,GAAG,KAAK;EAC3C,MAAM;IAAEQ;EAAG,CAAC,GAAGT,GAAG,CAACU,MAAM;EACzB,MAAMb,IAAI,CAACkB,iBAAiB,CAACN,EAAE,CAAC;EAChCR,GAAG,CAACd,IAAI,CAAC;IAAE6B,OAAO,EAAE;EAAe,CAAC,CAAC;AACvC,CAAC,CAAC;AAEFhC,GAAG,CAACiC,MAAM,CAAChC,IAAI,EAAE,MAAM;EACrBiC,OAAO,CAACC,GAAG,CAAC,sCAAsClC,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}